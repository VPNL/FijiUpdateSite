#@ File(label='Where is your FieldsOfView folder located?',style='directory') fields_dir
#@ Short(label='How many researchers will quantify these fields of view?',value=2) NResearchers
#@ Boolean(label='Assign all fields of view',value=True) sampleAllFovs

'''
Randomly Assign Fields

This script can be used to randomly organize and assign fields of view
from various channels across a set number of researchers to perform
semi-automated cell labeling. This script is intended to be run after
Separate Image Into Fields. First, the user will be asked about the
location of the fields of view they would like to randomly assign, in
addition to the number of researchers who will be segmenting these
fields semi-automatically. Next the user will be asked to specify the
initials of each RA who will be randomly assigned a subset of these
fields of view. The user will also be able to indicate which field of
view size they are specifically using and which fluorescent markers they
want to analyze. Lastly, if the user indicates that they would not like
to assign all fields of view, they will be later asked how many fields
they would like to assign.

INPUTS

    - fields_dir (java.io.File): FieldsOfView folder created from
                                 running Separate Image Into Fields.

    - NResearchers (int): The number of researchers amongst whom you
                          would like to distribute your fields of view

    - sampleAllFovs (boolean): Will you be assigning all fields of view,
                               or do you want to subsample the fields?
                               (default = True, sample all fields of
                               view)

OUTPUTS

    The script will automatically randomize all fields of view created
    and sort them into separate folders organized by field of view size,
    markers imaged, and researchers working on these images.
    Specifically, soft links will be generated under a new folder called
    Quantifications under the main data directory that link back to the
    individual fields of view generated by Separate Image Into Fields.
    This way, we can conserve hard drive space.

AR Oct 2021
AR Jan 2022 Added UI so that the user can specify the initials of the
            RAs
AR Feb 2022 Made sure the folder name with the list of markers is in
			alphabetical order; added option to only assign a certain
            number of fields
AR Mar 2022 Only select the desired number of fields of view by randomly
            cropping off some fields after systematic sampling across
            cortical depth
'''

########################################################################
#################### IMPORT MODULES AND READ INPUT #####################
########################################################################

# Import Java File object so we can ask the user to specify the folder
# containing the images they would like to separate into unique fields
# of view
from java.io import File

# Convert the fields_dir java.io.File object to a string so we know the
# path to the folder containing the fields to be randomly assigned
fieldsDir = fields_dir.getAbsolutePath()

del fields_dir

# Import our UI module
import UIs

# Import os so we can find subdirectories, make new directories and join
# path elements
import os

# Import tools that will allow us to work easily with files
from ImageTools import ImageFiles

# Import our ROI tools
import ROITools

# Import generic dialog so we can make quick and dirty UI's
from ij.gui import GenericDialog

# Import python's fraction module
from fractions import Fraction

# Import python's random package so we can randomly sort and assign
# fields of view
import random

# Import copyfile from shutil so we can copy files
from shutil import copyfile

########################################################################
############ ASK THE USER TO SPECIFY THE INITIALS OF ALL RAs ###########
########################################################################

# Store a list of strings that label each text field in the UI we will
# present to the user. Each string will take on the format 'Researcher
# X Initials' where X is replaced by the researcher number
initialsTextFieldLabels = ['Researcher {} Initials'.format(r+1) for r in range(NResearchers)]
del r

# The default initialis will just be the researcher number
defaultInitials = ['{}'.format(r+1) for r in range(NResearchers)]
del r

# Present the interface to the user so that we can get the initials of
# all the researchers
RAInitials = UIs.textFieldsUI('Specify the initials of all researchers who will quantify these fields of view.',
                              initialsTextFieldLabels,defaultInitials)
del initialsTextFieldLabels, defaultInitials

########################################################################
##################### IDENTIFY FIELD SIZE DESIRED ######################
########################################################################

# List all of the subdirectories of the field of view folder. These
# directory names will correspond with the different field sizes
# generated by running the Separate Image Into Fields script.
fieldSize = ImageFiles.findSubDirs(fieldsDir)

# Check to see if fields of multiple sizes have been generated
if isinstance(fieldSize,(tuple,list)):

    # If the user has made fields of view of more than one size, we'll
    # need to ask which field of view size they would like to use. Below
    # we make a UI to do this and get the chosen field size.
    fieldSize = UIs.whichChoiceUI('Which field of view size would you like to process?',
                                  'Field of view size:',fieldSize)

########################################################################
################# IDENTIFY DESIRED MARKERS TO QUANTIFY #################
########################################################################

# List all of the subdirectories of the field size subdirectory. These
# directory names will correspond with the different markers imaged in
# each channel.
markersImaged = ImageFiles.findSubDirs(os.path.join(fieldsDir,fieldSize))

# Ask the user which markers they would like to work on
markers2Assign = UIs.checkBoxUI('Which markers are you planning on analyzing?',
                                markersImaged)

del markersImaged

# Create a list of lists of all fields of view image files for each
# of the markers to assign to researchers
fieldsByMarker = [ImageFiles.findImgsInDir(os.path.join(fieldsDir,fieldSize,marker)) for marker in markers2Assign]

########################################################################
########### RANDOMIZE ALL ROWS AND COLUMNS OF FIELDS OF VIEW ###########
########################################################################

# After running the script Separate Image Into Fields, a zipped file
# containing all ROIs will be saved under the main data directory.
# Open this ROI file
fieldsROIs = ROITools.openROIFile(os.path.join(fieldsDir,'..','ROIs',fieldSize + '.zip'))

# Get all of the names of these ROIs. The list of these names will be
# equivalent to the list of all fields of view in the grid layed out
# previously in Separate Image Into Fields
fieldNames = [fieldROI.getName() for fieldROI in fieldsROIs]
del fieldsROIs

# Check to see if we are assigning all fields of view
if not sampleAllFovs:

    # Store the total number of fields of view
    totNFovs = len(fieldNames)

    # Initialize a generic dialog where we can ask the user to specify
    # how many fields of view they want to assign
    NFovsUI = GenericDialog('How many fields of view do you want to assign?')

    # Add a slider for the user to indicate how many fields of view they
    # want to assign to their RAs
    NFovsUI.addSlider('Number of Fields',1,totNFovs,totNFovs)

    # Display the UI to the user
    NFovsUI.showDialog()

    # Grab the desired number of fields of view to assign to the RAs
    nFovs2Assign = NFovsUI.getNextNumber()
    del NFovsUI

    # Check to see if the number of fields of view we want to assign is
    # greater than half of the total number of fields of view
    if nFovs2Assign > float(totNFovs) / 2.0 and nFovs2Assign < totNFovs:

    	# Compute the number of fields of view we want to leave out
    	nFovs2NotAssign = totNFovs - nFovs2Assign

    	# We'll want to avoid sampling every ith element from the list
    	# of field names. Compute i below. Increase by 1 so that we're
    	# not getting rid of too many fields of view.
    	iAvoid = Fraction(1.0/(float(nFovs2NotAssign)/float(totNFovs))).limit_denominator(1) + 1
        del nFovs2NotAssign

    	# Delete every iAvoid'th element from the field names list
    	del fieldNames[::int(iAvoid)]
        del iAvoid

    else:

    	# We'll want to sample every ith element from the list of field
    	# names such that after sampling we get slightly more than our
    	# desired number of fields of view. Calculate i and subtract by
    	# 1 so we get more fields than desired
    	iAssign = Fraction(1.0/(float(nFovs2Assign/float(totNFovs)))).limit_denominator(1) - 1

    	# Shorten fieldNames so that we're only sampling every
    	# iAssign'th element
    	fieldNames = fieldNames[::int(iAssign)]
        del iAssign

    del totNFovs
# Randomly shuffle this list of fields of view
random.shuffle(fieldNames)

# If the length of the list is greater than the number of fields we
# desire...
if len(fieldNames) > nFovs2Assign:

    # Only select our desired number of fields
    fieldNames = fieldNames[:nFovs2Assign]
del nFovs2Assign

########################################################################
############# DISTRIBUTE FIELDS OF VIEW AMONGST RESEARCHERS ############
########################################################################

# Divide up the fields of view so they are roughly equally distributed
# amongst the researchers
fieldsByResearcher = [fieldNames[i::NResearchers] for i in xrange(NResearchers)]

del fieldNames

# Loop across researchers that will be assigned fields of view
r = 0
for setOfFields in fieldsByResearcher:

    # Store the path to our new directory where this researcher's
    # assigned fields of view will be stored
    researcherOutDir = os.path.join(fieldsDir,'..','SemiautoCellLabels',
                                    fieldSize,'-'.join(sorted(markers2Assign)),
                                    'Researcher-' + RAInitials[r])

    # Make this folder if necessary
    ImageFiles.makedir(researcherOutDir)

    # Copy the true field of view boundary ROI to the folder where the
    # assigned fields will be organized for this researcher
    copyfile(os.path.join(fieldsDir,fieldSize,
                          fieldSize[:-1] + 'Boundary.roi'),
             os.path.join(researcherOutDir,
                          fieldSize[:-1] + 'Boundary.roi'))

    # Loop across markers imaged in various channels
    for imarker in range(len(markers2Assign)):

        # Create a directory for the assigned fields from this marker
        markerOutDir = os.path.join(researcherOutDir,
                                    markers2Assign[imarker] + '_Unlabeled_Fields')
        ImageFiles.makedir(markerOutDir)

        # Loop across all fields of view to assign to this researcher
        fieldNum = 1
        for fieldName in setOfFields:

            # Find the field where this marker is imaged that has the
            # correct field of view name
            iField2Assign = [iField for iField in range(len(fieldsByMarker[imarker])) if fieldName + '_' in fieldsByMarker[imarker][iField]][0]

            # Store the path to the field with the correct marker and
            # name, deleting it from our list
            field2Assign = fieldsByMarker[imarker].pop(iField2Assign)

            # Make a softlink for the field of view saved under
            # fieldPath under the researcher's directory for this marker
            # Store the field of view number in the soft link name
            ImageFiles.makeSoftLink(field2Assign,
                                    os.path.join(markerOutDir,str(fieldNum) + os.path.basename(field2Assign)))

            # Increase the field of view number
            fieldNum += 1

    # Increase the researcher number
    r += 1
